buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.2.6.RELEASE'
    }

    dependencies {
        delete "gradle/ext"
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'java'
    id 'maven'
    id 'war'
    id 'org.sonarqube' version "2.7"
    id 'org.springframework.boot' version '2.2.6.RELEASE' apply true
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

group = 'eu.audren.mael'

configurations {
    all*.exclude module: 'spring-boot-starter-logging'

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}


springBoot {
    mainClassName = 'eu.audren.mael.Application'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    jcenter()
}

sourceSets {

    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')

        compileClasspath = sourceSets.main.output + configurations.integrationTestCompile
        runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
    }
}

war {
    baseName = projectName
    version = version
}

dependencies {
    compile 'org.projectlombok:lombok:1.16.6'
    compile 'commons-fileupload:commons-fileupload:1.3.1'

    compile 'org.apache.logging.log4j:log4j-web:2.7'
    compile 'org.springframework.boot:spring-boot-starter-log4j2:1.3.3.RELEASE'
    compile('org.springframework.boot:spring-boot-starter-web:1.3.3.RELEASE') {
        exclude module: 'spring-boot-starter-tomcat'
        exclude module: 'spring-boot-starter-validation'
    }

    providedCompile 'org.springframework.boot:spring-boot-starter-tomcat:1.3.3.RELEASE'

    compile 'io.springfox:springfox-spring-web:2.4.0'
    compile 'io.springfox:springfox-swagger2:2.4.0'
    compile 'io.springfox:springfox-swagger-ui:2.4.0'
    compile 'com.google.guava:guava:19.0'

    compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.3.3.RELEASE'
    providedRuntime 'org.hsqldb:hsqldb:2.3.3'

    testCompile 'com.google.truth:truth:0.28'
    testCompile 'junit:junit:4.12'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.0.2'
    testCompile 'org.mockito:mockito-core:1.10.19'

    testCompile 'com.google.code.gson:gson:2.6.2'
    testCompile 'com.jayway.restassured:rest-assured:2.9.0'
    testCompile 'org.springframework.boot:spring-boot-starter-test:1.3.3.RELEASE'

}

def integrationTest = tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter('test')
}

jacocoTestReport {
    executionData test

    sourceSets project.sourceSets.main

    reports {
        xml.enabled = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

sonarqube {
    properties {
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.tests", "src/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/codeCoverageReport/codeCoverageReport.xml"
    }
}

idea {
    module {
        testSourceDirs += file('src/integrationTest/java')
        testSourceDirs += file('src/integrationTest/resources')

        scopes.TEST.plus += [
                configurations.integrationTestCompile,
                configurations.integrationTestRuntime
        ]
    }
}
